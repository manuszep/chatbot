/**
 * @module botbuilder-dialogs
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { TurnContext } from 'botbuilder-core';
import { Dialog, DialogInstance, DialogReason, DialogTurnResult } from './dialog';
import { DialogContext } from './dialogContext';
/**
 * The `ComponentDialog` class lets you break your bots logic up into components that can be added
 * as a dialog to other dialog sets within your bots project or exported and used in other bot
 * projects.
 * @param O (Optional) options that can be passed into the begin() method.
 */
export declare class ComponentDialog<O extends object = {}> extends Dialog<O> {
    protected initialDialogId: string;
    private dialogs;
    beginDialog(outerDC: DialogContext, options?: O): Promise<DialogTurnResult>;
    continueDialog(outerDC: DialogContext): Promise<DialogTurnResult>;
    resumeDialog(dc: DialogContext, reason: DialogReason, result?: any): Promise<DialogTurnResult>;
    repromptDialog(context: TurnContext, instance: DialogInstance): Promise<void>;
    endDialog(context: TurnContext, instance: DialogInstance, reason: DialogReason): Promise<void>;
    addDialog<T extends Dialog>(dialog: T): ComponentDialog<O>;
    /**
     * Finds a dialog that was previously added to the set using [add()](#add).
     *
     * @remarks
     * This example finds a dialog named "greeting":
     *
     * ```JavaScript
     * const dialog = dialogs.find('greeting');
     * ```
     * @param dialogId ID of the dialog/prompt to lookup.
     */
    findDialog(dialogId: string): Dialog | undefined;
    protected onBeginDialog(innerDC: DialogContext, options?: O): Promise<DialogTurnResult>;
    protected onContinueDialog(innerDC: DialogContext): Promise<DialogTurnResult>;
    protected onEndDialog(context: TurnContext, instance: DialogInstance, reason: DialogReason): Promise<void>;
    protected onRepromptDialog(context: TurnContext, instance: DialogInstance): Promise<void>;
    protected endComponent(outerDC: DialogContext, result: any): Promise<DialogTurnResult>;
}
