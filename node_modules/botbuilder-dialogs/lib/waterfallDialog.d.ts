import { Dialog, DialogReason, DialogTurnResult } from './dialog';
import { DialogContext } from './dialogContext';
import { WaterfallStepContext } from './waterfallStepContext';
/**
 * Function signature of a waterfall step.
 *
 * @remarks
 *
 * ```TypeScript
 * type WaterfallStep = (step: WaterfallStepContext<O>) => Promise<DialogTurnResult>;
 * ```
 * @param WaterfallStepContext Contextual information for the current step being executed.
 */
export declare type WaterfallStep<O extends object = {}> = (step: WaterfallStepContext<O>) => Promise<DialogTurnResult>;
/**
 * When called within a waterfall step the dialog will skip to the next waterfall step.
 *
 * ```TypeScript
 * type SkipStepFunction = (args?: any) => Promise<DialogTurnResult>;
 * ```
 * @param SkipStepFunction.args (Optional) additional argument(s) to pass into the next step.
 */
export declare type SkipStepFunction = (args?: any) => Promise<DialogTurnResult>;
/**
 * Dialog optimized for prompting a user with a series of questions.
 *
 * @remarks
 * Waterfalls accept a stack of functions which will be executed in sequence. Each waterfall step
 * can ask a question of the user and the users response will be passed as an argument to the next
 * waterfall step.
 */
export declare class WaterfallDialog<O extends object = {}> extends Dialog<O> {
    private readonly steps;
    /**
     * Creates a new waterfall dialog containing the given array of steps.
     * @param steps Array of waterfall steps.
     */
    constructor(dialogId: string, steps?: WaterfallStep<O>[]);
    /**
     * add a new step to the waterfall
     * @param step method to call
     * @returns WaterfallDialog
     */
    addStep(step: WaterfallStep<O>): WaterfallDialog<O>;
    beginDialog(dc: DialogContext, options?: O): Promise<DialogTurnResult>;
    continueDialog(dc: DialogContext): Promise<DialogTurnResult>;
    resumeDialog(dc: DialogContext, reason: DialogReason, result?: any): Promise<DialogTurnResult>;
    protected onStep(step: WaterfallStepContext<O>): Promise<DialogTurnResult>;
    private runStep(dc, index, reason, result?);
}
